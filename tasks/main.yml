---
# tasks file for gatherApacheVHostData
- name: installing
  yum: name="libselinux-python" state="present"
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: copying template to remote host
  template: src="vHostsParser.sh.jinja2" dest="~/vHostsParser.sh" mode="0544"

- name: Gathering Include Files
  shell: "cat {{ item }} | grep -v '#' | grep -P '^ *(Include|IncludeOptional)' | awk '{print $2}' | sed 's;/$;/\\*;g'"
  with_items: "{{ debianOSConfigFiles }}"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  register: debianIncludeFiles

- name: Gathering virtualHosts information from main config file
  shell: "cat {{ item }} | ~/vHostsParser.sh"
  with_items: "{{ debianOSConfigFiles }}"
  register: debianvHosts1
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: executing the script on the remote macines
  shell: "cat {{ debianOsServerRoot +  item }} | ~/vHostsParser.sh"
  with_items: "{{ debianIncludeFiles.results  | map(attribute='stdout_lines') | list }}"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  register: debianvHosts2

- name: Combining Vhosts information debian
  set_fact:
      result_debian: "{{ (debianvHosts2.results  | map(attribute='stdout_lines') | list)  +  (debianvHosts1.results  | map(attribute='stdout_lines') | list) }}"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


- name: logging output
  debug:
      var: item
  with_items: "{{ result_debian }}"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (((filter == 1) and (item | from_json | json_query('ServerName') in ServerName)) or (filter == 0))


- name: Gathering Include Files
  shell: "cat {{ item }} | grep -v '#' | grep -P '^ *(Include|IncludeOptional)' | awk '{print $2}' | sed 's;/$;/\\*;g'"
  with_items: "{{ centOSConfigFiles }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  register: centIncludeFiles

- name: Gathering virtualHosts information from main config file
  shell: "cat {{ item }} | ~/vHostsParser.sh"
  with_items: "{{ centOSConfigFiles }}"
  register: centvHosts1
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


- name: executing the script on the remote macines
  shell: "cat {{  centOsServerRoot +  item }} | ~/vHostsParser.sh"
  with_items: "{{ centIncludeFiles.results  | map(attribute='stdout_lines') | list }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  register: centvHosts2

- name: combining Vhosts information centOS
  set_fact:
      result_centOS: "{{ (centvHosts2.results  | map(attribute='stdout_lines') | list)  +  (centvHosts1.results  | map(attribute='stdout_lines') | list) }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


- name: logging output
  debug:
      var: item 
  with_items: "{{ result_centOS }}"
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and (((filter == 1) and (item | from_json | json_query('ServerName') in ServerName)) or (filter == 0))

